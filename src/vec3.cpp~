#include <iostream>
template <typename T>
class Vec3
{
  T x, y, z;
public:
  Vec3<T> (const T &a, const T &b, const T &c) : x(a), y(b), z(c) {}
  Vec3<T>  operator+(const Vec3<T>& v);
  Vec3<T>  operator-(const Vec3<T>& v);
  T operator*(const Vec3<T>& v);
  friend std::ostream& operator<<(ostream &out, Vec3<T> &v);
};

template <typename T>
Vec3<T> operator+(const Vec3<T>& v)
{
  return Vec3<T>(x + v.x, y + v.y, z + v.z);
}

template <typename T>
Vec3<T> operator-(const Vec3<T>& v)
{
  return Vec3<T>(x - v.x, y - v.y, z - v.z);
}

template <typename T>
T operator*(const Vec3<T>& v)
{
  return v.x*x + v.y*y + v.z*z;
}

std::ostream &operator<<(std::ostream &out, Vec3 &v)
{
  out << "(" << v.x << ", " << v.y << ", " << v.z << ")";
  return out;
}

int main()
{
  Vec3<double> v(1.,2.3.);
  std::cout << v << std::endl;
}
